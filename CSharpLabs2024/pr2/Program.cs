// Завдання 1. Написати програму. Дано три цілих числа. Вибрати з них ті, які належать інтервалу [1, 10 +№].
// Де №-остання цифра порядкового номеру у списку групи.

using System;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        // Оголошення змінних з цілими числами
        int a = 6;
        int b = 8;
        int c = 12;
        int no = 3;

        // Виклик методу filterByInterval з вхідним масивом чисел та вказаним інтервалом
        int[] result1 = filterByInterval(new[] { a, b, c }, 1, 10 + no);
        // Виведення результатів методу filterByInterval у вигляді рядка через кому
        Console.WriteLine(string.Join(",", result1));
    }
    // Визначення методу filterByInterval з вхідним масивом чисел та інтервалом
    static int[] filterByInterval(int[] nums, int start, int end)
    {

        // Фільтрація чисел в масиві, що належать інтервалу
        return nums.Where(x => x >= start && x <= end).ToArray();
    }
}

// Консоль
// 6, 8, 12

// Завдання 2.Написати програму. Дано три сторони трикутника. Обчислити периметр та площу трикутника.
// Визначити вид трикутника за сторонами. (потрібно робити перевірку на дійсність трикутника та на коректність введених даних).

using System;

class Program
{

    static void Main(string[] args)
    {
        // Оголошення та ініціалізація сторін трикутника
        double a = 3;
        double b = 4;
        double c = 5;

        // Створення об'єкту трикутника
        Triangle triangle = new Triangle(a, b, c);
        // Виклик методу для виведення інформації про трикутник
        triangle.PrintInfo();
    }

    class Triangle
    {
        // Оголошенння властивостей для сторін трикутника
        public double A { get; set; }
        public double B { get; set; }
        public double C { get; set; }

        // Конструктор класу Triangle
        public Triangle(double a, double b, double c)
        {
            A = a;
            B = b;
            C = c;
        }

        // Метод для виведення інформації про трикутник
        public void PrintInfo()
        {
            // Перевірка умови існування трикутника
            if (A + B > C && A + C > B && B + C > A)
            {
                // Обчислення периметра
                double perimeter = A + B + C;
                double p = perimeter / 2;
                // Обчислення площі за формулою Герона
                double area = Math.Sqrt(p * (p - A) * (p - B) * (p - C));

                // Виведення інформації про трикутник 
                Console.WriteLine($"Периметр: {perimeter:F2}");
                Console.WriteLine($"Площа: {area:F2}");

                // Визначення типу трикутника
                if (A == B && B == C)
                {
                    Console.WriteLine("Рівносторонній трикутник");
                }
                else if (A == B || B == C || A == C)
                {
                    Console.WriteLine("Рівнобедрений трикутник");
                }
                else
                {
                    Console.WriteLine("Різносторонній трикутник");
                }
            }
            else
            {
                Console.WriteLine("Такого трикутника не існує");
            }
        }
    }
}

// Консоль
// Периметр: 12.00
// Площа: 6.00
// Різносторонній трикутник


// Завдання 3. Написати програму. Дано масив Х довжиною 10+№  (де №-остання цифра студента у списку групи).
// Знайти мінімальне та максимальне значення. Вивести на екран масив та самі значення.  

using System;
using System.Linq;

class Program
{

    static void Main(string[] args)
    {
        // Визначення змінної 'no' 
        int no = 3;

        // Обчислення значення змінної 'n' як суми 10 та значення змінної 'no'
        int n = 10 + no;

        // Генерація масиву 'x' з 'n' елементів в діапазоні від -20 до 30
        int[] x = GenerateArray(n, -20, 30);

        // Знаходження мінімального значення в масиві 'x'
        int min = x.Min();

        // Знаходження максимального значення в масиві 'x'
        int max = x.Max();

        // Виведення масиву 'x' на консоль
        Console.WriteLine($"Масив X: [{string.Join(", ", x)}]");

        // Виведення мінімального значення масиву 'x' на консоль
        Console.WriteLine($"Min X = {min}");

        // Виведення максимального значення масиву 'x' на консоль
        Console.WriteLine($"Max X = {max}");
    }

    // Метод для генерації масиву з випадковими значеннями
    static int[] GenerateArray(int length, int min, int max)
    {
        // Створюємо новий об'єкт класу Random для генерації випадкових чисел
        Random rnd = new Random();
        // Оголошуємо масив 'arr' довжиною 'length', який буде містити випадкові числа
        int[] arr = new int[length];
        // Заповнюємо масив 'arr' випадковими числами у вказаному діапазоні
        for (int i = 0; i < length; i++)
        {
            // Використовуємо метод Next() об'єкта rnd для генерації випадкового числа у вказаному діапазоні
            arr[i] = rnd.Next(min, max + 1);
        }
        return arr; // Повертаємо згенерований масив
    }
}

// Консоль
// Масив X: [13, 29, 2, 11, 24, 17, 7, 11, 23, -19, 27, -6, 29]
// Min X = -19
// Max X = 29

// Завдання 4. Написати програму. З масиву Х довжиною 10+№  (де №-остання цифра студента у списку групи),
// серед елементів якого є позитивні та негативні та нуль, сформуйте новий масив Y,
// узявши тільки елементи з Х які більше по модулю заданого числа М. Виведіть на екран число М та масиви заданий та отриманий.

using System;
using System.Linq;

class Program
{

    static void Main(string[] args)
    {
        // Визначаємо змінну 'no' зі значенням 5
        int no = 5;

        // Обчислюємо змінну 'n' як суму 10 та значення змінної 'no'
        int n = 10 + no;

        // Визначаємо змінну 'm' зі значенням 15
        int m = 15;

        // Генеруємо масив 'x' довжиною 'n' з випадковими числами в діапазоні від -20 до 30
        int[] x = GenerateArray(n, -20, 30);

        // Фільтруємо масив 'x' за модулем, залишаючи лише ті елементи, модуль яких більший за 'm', і зберігаємо результат у масив 'y'
        int[] y = FilterByModulus(x, m);

        // Виводимо на екран заданий масив 'x'
        Console.WriteLine($"Заданий масив X: [{string.Join(", ", x)}]");

        // Виводимо на екран число 'm'
        Console.WriteLine($"Число M: {m}");

        // Виводимо на екран отриманий масив 'y'
        Console.WriteLine($"Отриманий масив Y: [{string.Join(", ", y)}]");
    }

    // Метод для генерації масиву з випадковими значеннями
    static int[] GenerateArray(int length, int min, int max)
    {
        Random rnd = new Random();
        int[] arr = new int[length];
        for (int i = 0; i < length; i++)
        {
            arr[i] = rnd.Next(min, max + 1);
        }
        return arr;
    }

    // Метод для фільтрації масиву за модулем
    static int[] FilterByModulus(int[] arr, int m)
    {
        // Використовуємо LINQ для відбору елементів, модуль яких більший за задане число 'm'
        return arr.Where(x => Math.Abs(x) > m).ToArray();
    }
}

// Консоль
// Заданий масив X: [0, -2, -1, -19, 24, 15, -13, 20, 19, -6, 5, 8, 16, 13, 12]
// Число M: 15
// Отриманий масив Y: [-19, 24, 20, 19, 16]